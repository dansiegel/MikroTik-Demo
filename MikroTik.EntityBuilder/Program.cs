using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using tik4net.Objects;
using Humanizer;

namespace MikroTik.EntityBuilder
{
    class Program
    {
        private const string XmlNamespace = @"
             xmlns:XMLPREFIX=""clr-namespace:TIK4NETNAMESPACE;assembly=tik4net.objects""";
        private const string GeneratedExtensions = @"using ModemConfigurator.Views;
using ModemConfigurator.ViewModels;
using Prism.Ioc;

namespace ModemConfigurator
{
    public static class GeneratedExtensions
    {
        public static void RegisterAutoGeneratedViews(this IContainerRegistry containerRegistry)
        {
Registrations
        }
    }
}";
        private const string LabelTemplate = @"            <Label Text=""PropertyName"" FlexLayout.Basis=""50%"" />
            <Label Text=""{Binding PropertyName}"" FlexLayout.Basis=""50%"" />
";
        private const string MenuTemplate = @"                        <Button Text=""FriendlyName"" 
                                Command=""{Binding NavigateCommand}"" 
                                CommandParameter=""NavigationPage/TEntityPage"" 
                                Margin=""20"" />
";
        private const string RegistrationTemplate = "            containerRegistry.RegisterForNavigation<TEntityPage, TEntityPageViewModel>();\n            containerRegistry.RegisterForNavigation<TEntityDetailPage, TEntityDetailPageViewModel>();\n";
        private const string EntryCellTemplate = @"
        <EntryCell Label=""FriendlyName""OTHERTAGS Text=""{Binding Entity.PropertyName}"" />";
        private const string SwitchCellTemplate = @"
        <SwitchCell Text=""FriendlyName"" On=""{Binding Entity.PropertyName}"" />";
        private const string PickerCellTemplate = @"
        <ViewCell>
            <FlexLayout Wrap=""Wrap"">
              <Label Text=""FriendlyName""
                     FlexLayout.Basis=""25%"" />
              <controls:Picker x:TypeArguments=""XMLPREFIX:EnumName""
                               SelectedItem=""{Binding Entity.PropertyName}""
                               FlexLayout.Basis=""75%"" />
            </FlexLayout>
        </ViewCell>";



        static void Main(string[] args)
        {
            Directory.Delete("Generated", true);
            tik4net.Objects.System.SystemResource resource;
            var assembly = typeof(tik4net.Objects.MacAddress).Assembly;

            string menu = string.Empty;
            string registration = string.Empty;
            int i = 1;
            foreach(var type in assembly.ExportedTypes.Where(t => t.GetCustomAttributes().Any(a => a is TikEntityAttribute)))
            {
                Console.WriteLine($" {i++}) {type.FullName}");
                GenerateViewModel(type);
                GenerateXAMLView(type);
                GenerateCodeBehind(type);
                GenerateDetailCodeBehind(type);
                GenerateDetailViewModel(type);
                GenerateDetailXAML(type);

                // var entity = Regex.Replace(MenuTemplate, "TEntity", type.Name);
                // entity = Regex.Replace(entity, "FriendlyName", type.Name.Humanize());
                // menu += entity;

                registration += Regex.Replace(RegistrationTemplate, "TEntity", type.Name);
            }

            File.WriteAllText($"Generated{Path.DirectorySeparatorChar}GeneratedExtensions.cs", Regex.Replace(GeneratedExtensions, "Registrations", registration));
        }

        static void GenerateViewModel(Type type)
        {
            var viewmodel = File.ReadAllText($"Templates{Path.DirectorySeparatorChar}ViewModelTemplate");
            viewmodel = Regex.Replace(viewmodel, "TypeNamespace", type.Namespace);
            viewmodel = Regex.Replace(viewmodel, "TEntity", type.Name);
            viewmodel = Regex.Replace(viewmodel, "FriendlyName", type.Name.Humanize(LetterCasing.Title));

            if(type.Namespace == "tik4net.Objects")
            {
                viewmodel = Regex.Replace(viewmodel, "using tik4net.Objects;\nusing tik4net.Objects;", "using tik4net.Objects;");
            }

            Directory.CreateDirectory($"Generated{Path.DirectorySeparatorChar}ViewModels");
            File.WriteAllText($"Generated{Path.DirectorySeparatorChar}ViewModels{Path.DirectorySeparatorChar}{type.Name}PageViewModel.cs", viewmodel); 
        }

        static void GenerateXAMLView(Type type)
        {
            var xaml = File.ReadAllText($"Templates{Path.DirectorySeparatorChar}ViewTemplate");

            string properties = string.Empty;
            foreach(var prop in type.GetProperties())
            {
                properties += Regex.Replace(LabelTemplate, "PropertyName", prop.Name);
            }

            var entityAttribute = type.GetCustomAttribute<TikEntityAttribute>();
            xaml = Regex.Replace(xaml, "EntityPath", entityAttribute.EntityPath);
            xaml = Regex.Replace(xaml, "PropertyLabels", properties);
            xaml = Regex.Replace(xaml, "TEntity", type.Name);

            Directory.CreateDirectory($"Generated{Path.DirectorySeparatorChar}Views");
            File.WriteAllText($"Generated{Path.DirectorySeparatorChar}Views{Path.DirectorySeparatorChar}{type.Name}Page.xaml", xaml); 
        }

        static void GenerateCodeBehind(Type type)
        {
            var codeBehind = File.ReadAllText($"Templates{Path.DirectorySeparatorChar}ViewTemplateCodeBehind");
            codeBehind = Regex.Replace(codeBehind, "TEntity", type.Name);
            Directory.CreateDirectory($"Generated{Path.DirectorySeparatorChar}Views");
            File.WriteAllText($"Generated{Path.DirectorySeparatorChar}Views{Path.DirectorySeparatorChar}{type.Name}Page.xaml.cs", codeBehind);
        }

        static void GenerateDetailViewModel(Type type)
        {
            var viewmodel = File.ReadAllText($"Templates{Path.DirectorySeparatorChar}DetailViewModelTemplate");
            viewmodel = Regex.Replace(viewmodel, "TypeNamespace", type.Namespace);
            viewmodel = Regex.Replace(viewmodel, "TEntity", type.Name);
            viewmodel = Regex.Replace(viewmodel, "FriendlyName", type.Name.Humanize(LetterCasing.Title));

            if(type.Namespace == "tik4net.Objects")
            {
                viewmodel = Regex.Replace(viewmodel, "using tik4net.Objects;\nusing tik4net.Objects;", "using tik4net.Objects;");
            }

            Directory.CreateDirectory($"Generated{Path.DirectorySeparatorChar}ViewModels");
            File.WriteAllText($"Generated{Path.DirectorySeparatorChar}ViewModels{Path.DirectorySeparatorChar}{type.Name}DetailPageViewModel.cs", viewmodel); 
        }

        static void GenerateDetailXAML(Type type)
        {
            var xaml = File.ReadAllText($"Templates{Path.DirectorySeparatorChar}DetailPageTemplate");
            string namespaces = string.Empty;
            string properties = string.Empty;
            foreach(var prop in type.GetProperties())
            {
                string cell = string.Empty;
                string tags = string.Empty;
                var tikProperty = prop.GetCustomAttribute<TikPropertyAttribute>();

                if(prop.PropertyType == typeof(string))
                {
                    cell = EntryCellTemplate;
                }
                else if(prop.PropertyType == typeof(bool))
                {
                    cell = SwitchCellTemplate;
                }
                else if(prop.PropertyType == typeof(int) || prop.PropertyType == typeof(long))
                {
                    tags += @" Keyboard=""Numeric""";
                    cell = EntryCellTemplate;
                }
                else if(prop.PropertyType.IsEnum && prop.PropertyType.MemberType != MemberTypes.NestedType)
                {
                    var temp = prop.PropertyType.MemberType == MemberTypes.NestedType ?
                                        $"{prop.PropertyType.Namespace}.{prop.DeclaringType.Name}" :
                                          prop.PropertyType.Namespace;
                    var entityNamespace = Regex.Replace(XmlNamespace, "TIK4NETNAMESPACE", temp);
                    var entityName = prop.PropertyType.Name.ToLower();
                    entityNamespace = Regex.Replace(entityNamespace, "XMLPREFIX", entityName);
                    if(!namespaces.Contains(entityName))
                    {
                        namespaces += entityNamespace;
                    }

                    // string enumName = prop.PropertyType.MemberType == MemberTypes.NestedType ?
                    //                       $"{prop.DeclaringType.Name}.{prop.PropertyType.Name}" :
                    //                       prop.PropertyType.Name;
                    cell = Regex.Replace(PickerCellTemplate, "EnumName", prop.PropertyType.Name);
                    cell = Regex.Replace(cell, "XMLPREFIX", entityName);
                }
                else if(prop.PropertyType == typeof(TimeSpan) && tikProperty.IsReadOnly)
                {
                    cell = EntryCellTemplate;
                }
                // TODO: Add cell for TimeSpan
                else
                {
                    Console.WriteLine($"{type.Name} - {prop.Name} is of type: {prop.PropertyType.Name}");
                }

                if(tikProperty.IsReadOnly)
                {
                    tags += @" IsEnabled=""False""";
                }
                
                cell = Regex.Replace(cell, "OTHERTAGS", tags);
                cell = Regex.Replace(cell, "FriendlyName", prop.Name.Humanize(LetterCasing.Title));
                cell = Regex.Replace(cell, "PropertyName", prop.Name);
                properties += cell;
            }

            var entityAttribute = type.GetCustomAttribute<TikEntityAttribute>();
            xaml = Regex.Replace(xaml, "EntityPath", entityAttribute.EntityPath);
            xaml = Regex.Replace(xaml, "PropertyCells", properties);
            xaml = Regex.Replace(xaml, "TEntity", type.Name);
            xaml = Regex.Replace(xaml, "TIK4NETNAMESPACE", namespaces);
            xaml = Regex.Replace(xaml, "FriendlyName", type.Name.Humanize(LetterCasing.Title));

            Directory.CreateDirectory($"Generated{Path.DirectorySeparatorChar}Views");
            File.WriteAllText($"Generated{Path.DirectorySeparatorChar}Views{Path.DirectorySeparatorChar}{type.Name}DetailPage.xaml", xaml); 
        }

        static void GenerateDetailCodeBehind(Type type)
        {
            var codeBehind = File.ReadAllText($"Templates{Path.DirectorySeparatorChar}DetailPageTemplateCodeBehind");
            codeBehind = Regex.Replace(codeBehind, "TEntity", type.Name);
            Directory.CreateDirectory($"Generated{Path.DirectorySeparatorChar}Views");
            File.WriteAllText($"Generated{Path.DirectorySeparatorChar}Views{Path.DirectorySeparatorChar}{type.Name}DetailPage.xaml.cs", codeBehind);
        }
    }
}
